# Draws graph of "M" and the proportion of CTLs that have infiltrated the bolus (on two separate axes).
#
# Mark N. Read, 2018

import matplotlib.pyplot as plt
import numpy as np
import os.path
import pandas
import seaborn as sns
import sys

directory = '.' 
if '-i' in sys.argv:
    directory = sys.argv[sys.argv.index('-i') + 1]

end_time = None
if '-et' in sys.argv:  # Specify maximum time value for X axis in plots.
	end_time = float(sys.argv[sys.argv.index('-et') + 1])

plot_infiltration = True  # Script can accommodate this information not being available. 

# Read in M data, this is generated by the swarming metric sciprt. 
# Must contain columns named 'Times' and 'M'
m_df = pandas.read_csv(directory + '/M.csv')
# M files express time in seconds. Convert to hours. 
time_column_name = 'Time_s'
if 'Times' in m_df.columns:
    time_column_name = 'Times'    
m_df['Times'] = m_df[time_column_name] / (60 * 60)

infiltration_file = directory + '/bolus_infiltration.csv'
plot_infiltration = os.path.isfile(infiltration_file)
if plot_infiltration:
	# Read in bolus_infiltration data. Should contain column "Proportion bolus infiltrates" and 'Time' (in minutes)
	bolus_infiltration_df = pandas.read_csv(infiltration_file)
	if 'Time' in bolus_infiltration_df.columns:
		# Time expressed in minutes. Convert to hours
		bolus_infiltration_df['Time (h)'] = bolus_infiltration_df['Time'] / 60.

plt.clf()
M_ax = None
if plot_infiltration:
	ax1 = sns.lineplot(x='Time (h)', y='Proportion bolus infiltrates', data=bolus_infiltration_df, color='dodgerblue')
	ax1.set_xlabel('Time (h)')
	ax1.set_ylabel('Proportion of CTLs infiltrating bolus', color='dodgerblue')
	# -0.033 set to align zero on ax1 with zero on ax2. 
	# ax2 spans -0.05 to 0.6 = range of 0.065. distance from zero to -0.05 is (0.05/0.65) 0.077 of the range. 
	# x = 0.033 = (0.4 x 0.077) / 0.923.
	ax1.set_ylim([-0.033, 0.4])  
	if '-human' in sys.argv:  # The human T cell dataset exceeded the limits of other datasets, reflected here. 
		print("Running human-specific y axis ranges.")
		ax1.set_ylim([-0.033, 0.45])  
	ax1.tick_params('y', colors='dodgerblue')

	M_ax = plt.twinx()  # Prepare to plot M on the same graph. 


M_ax = sns.lineplot(x='Times', y='M', data=m_df, color='orange', ax=M_ax)
M_ax.set_ylabel('M', color='orange')
M_ax.set_ylim([-0.05, 0.6])
# Matches case if both proportion of infiltrates and M are drawn together. 
M_ax.yaxis.tick_right()  
M_ax.yaxis.set_ticks_position('both')
M_ax.yaxis.set_label_position("right")
if '-human' in sys.argv:  # The human T cell dataset exceeded the limits of other datasets, reflected here. 
	print("Running human-specific y axis ranges.")
	M_ax.set_ylim([0., 0.65])  
M_ax.tick_params('y', colors='orange')


if end_time is None:
	end_time = np.min([16, np.max([bolus_infiltration_df['Time (h)'], m_df['Times']])])
else:
	# Set above by the user. 
	pass 
M_ax.set_xlim([0, end_time])
M_ax.plot([0, end_time], [0 , 0], c='k')


plt.savefig(directory + '/bolus_attraction_infiltration.eps', bbox_inches='tight')
plt.savefig(directory + '/bolus_attraction_infiltration.png', bbox_inches='tight', r=300)